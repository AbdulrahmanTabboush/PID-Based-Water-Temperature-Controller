//importing PID library
#include <PID_v2.h>
//imporing serial library
#include <SPI.h>
//importing sensor library
#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 13
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
//importing LCD library
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x3f, 20, 4);
int menu = 0;
//defining pins and necessary variables for buttons
int btn_status = 0;
int up = 8;
int up_status;
int down = 9;
int down_status;
int btn = 11;
long debounce = 0;  // Debounce delay
// RGB LED 
int redPin= A1;
int greenPin = A2;
int bluePin = A0;

//PID Algorithm
//defining PWM output pin and necessary variables for the
int PWM_pin = 3;
double Setpoint, current_temp, pwm, last_set_point = 0;
//Define the aggressive and conservative Tuning Parameters
double aggKp = 100, aggKi = 0, aggKd = 0;
double consKp = 95, consKi = 1.2, consKd = 500;
PID_v2 myPID(consKp, consKi, consKd, PID::Direct);  //creaing an object of the PID library class

void setup() {
  //initializing serial monitor with 115200 baudrate
  Serial.begin(115200);
  //sensor
  pinMode(13, INPUT);
  sensors.requestTemperatures();  //reading temp at startup
  const double current_temp = sensors.getTempCByIndex(0);
  
  //PID Algorithm
  Setpoint = 50;                           //desrired setpoint
  myPID.Start(current_temp, 0, Setpoint);  //(current temp,output,setpoint)
  //setting freq of PWM
  TCCR2B = TCCR2B & B11111000 | 0x03;      // setting pin 3 to PWM frequency 
                                           //of 978Hz using Timer/Counter Control Register 2B
  //buttons
  pinMode(up, INPUT_PULLUP);
  pinMode(down, INPUT_PULLUP);
  pinMode(btn, INPUT_PULLUP);
  //lcd
  lcd.init();
  lcd.backlight();
  //RGB LED
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  analogWrite(redPin , HIGH);
  analogWrite(greenPin, HIGH);
  analogWrite(bluePin, HIGH);
}

void loop() {
  //sensor
  //requesting temp at beginning of each loop
  sensors.requestTemperatures();
  const double current_temp = sensors.getTempCByIndex(0);
  
  //PID algorithm
  //a gap is the temp difference between 
  //setpoint and current temp , the algorithm uses two sets to of parameteres , 
  //one before the gap and another
  //after , this ensures fast rising of temp and smaller ss error.
  double gap = abs(myPID.GetSetpoint() - current_temp);

  //the next if statement only applies if the current temp 
  //is samller than the gap, meaning we are getting closer to the setpoint , 
  //and at this point we change the parameteres to values than will 
  //allow us to achieve accurate result with minimum overhsoot and ss error.
  if (gap < 4) {
    myPID.SetTunings(consKp, consKi, consKd);

    Serial.print(" Setpoint ");
    Serial.print(Setpoint);
    Serial.print(" // consKp: ");
    Serial.print(consKp);
    Serial.print(" // consKi: ");
    Serial.print(consKi);
    Serial.print(" // consKd: ");
    Serial.print(consKd);
    Serial.print(" // current_temp ");
    Serial.print(current_temp);
    Serial.print(" // gap: ");
    Serial.print(gap);
    Serial.print(" // PWM:");
    Serial.println(pwm);

  }
  //as long as current temp is larger than the gap , 
  //we use a large Kp value and zero Ki and Kd , 
  //this will give rapid heating and minimize the time to reach setpoint
  else {
    //we're far from setpoint, use aggressive tuning parameters
    myPID.SetTunings(aggKp, aggKi, aggKd);

    Serial.print(" Setpoint ");
    Serial.print(Setpoint);
    Serial.print(" // aggKp: ");
    Serial.print(aggKp);
    Serial.print(" // aggKi: ");
    Serial.print(aggKi);
    Serial.print(" // aggKd: ");
    Serial.print(aggKd);
    Serial.print(" // current_temp ");
    Serial.print(current_temp);
    Serial.print(" // gap: ");
    Serial.print(gap);
    Serial.print(" // PWM:");
    Serial.println(pwm);
  }
  // calling function run from the PID library and passing the current temp
  pwm = myPID.Run(current_temp);
  //sending the approprate PWM signal after the calculations to pin D3
  analogWrite(PWM_pin, pwm);
  //displaying setpoint and current temp in menu 0
  lcd.setCursor(0, 0);
  lcd.print("PID TEMP control");
  lcd.setCursor(0, 1);
  lcd.print("S:");
  lcd.setCursor(2, 1);
  lcd.print(Setpoint, 1);
  lcd.setCursor(9, 1);
  lcd.print("R:");
  lcd.setCursor(11, 1);
  lcd.print(current_temp, 1);

  //swtiching to menu 1 , disables the PWM signal and allows the restting of setpoint using the CONTROL PANEL
  if (menu == 1) {
    analogWrite(PWM_pin, 0);
    if (Setpoint != last_set_point) {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Set  temperature");
      lcd.setCursor(0, 1);
      lcd.print(Setpoint);
    }
    last_set_point = Setpoint;
  }
  //RGB LED  //blink yellow and red if gap > 1.5C , only red if gap //< 1.5C
  if (gap<1.5) {
  setColor(0, 255, 255); // Red Color
  } 
  if (gap>1.5) {
  setColor(0, 150,255); // yellow Color
  delay(150);
  setColor(0, 100, 255); // Red Color
  delay(150);
    }
}

//RGB LED
void setColor(int redValue, int greenValue, int blueValue) {
  analogWrite(redPin, redValue);
  analogWrite(greenPin, greenValue);
  analogWrite(bluePin, blueValue);
}

//enabling interrupts on menu button
///////////////////////////////////////////////interruption vector for push button/////////////////////////////////////////////////
ISR(PCINT0_vect) {
  //Push button was pressed!
  if ((PINB & B00001000) == 0)  //Pin D11 is LOW?
  {
    btn_status = 1;
  }
  //switch between menu 0 and 1
  else if (btn_status == 1) {
    if (menu == 1) {
      menu = 0;
      btn_status = 0;
      delay(1000);
    }
    if (menu == 0) {
      menu = menu + 1;
      btn_status = 0;
      delay(1000);
    }
  }
  // increment and decrement buttons for the setpoint
  if (menu == 1) {
    //pressing up_button increments setpoint by 0.5C
    if (up_status = ((PINB & B00000001) == 0)) {
      if (millis() - debounce > 40) {
        Setpoint = Setpoint + 0.5;
      }
      debounce = millis();
    }
    //pressing up_button decrements setpoint by 0.5C
    else if (down_status = ((PINB & B00000010) == 0)) {
      if (millis() - debounce > 40) {  //debounce delay
        Setpoint = Setpoint - 0.5;
      }
      debounce = millis();
    }
  }
